// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Activitylogs {
  id      Int      @id @default(autoincrement())
  date    DateTime
  Message String
  user    User?    @relation(fields: [Actor], references: [id])
  Actor  Int
}

// Configuration
model DispoEnsg {
  id            Int            @id @default(autoincrement())
  enseignant    Enseignant?    @relation(fields: [idEnsg], references: [id], onDelete: Cascade)
  idEnsg        Int?
  jour          NomJours
  heureDeb      String         @db.VarChar(50)
  heureFin      String?        @db.VarChar(50)
  etablissement Etablissement? @relation(fields: [idEtab], references: [id])
  idEtab        Int?
}

model Eleve {
  id                      Int            @id @default(autoincrement())
  nom                     String         @db.VarChar(50)
  prenom                  String         @db.VarChar(50)
  num                     Float
  niveauClass             NiveauClass?   @relation(fields: [idNiveau], references: [id])
  idNiveau                Int?
  email                   String         @db.VarChar(50)
  tel                     String         @db.VarChar(20)
  login                   String         @db.VarChar(50)
  pwd                     String         @db.VarChar(50)
  etat                    Int
  wallet                  Float
  etabOrigine             String         @db.VarChar(50)
  image                   String         @db.VarChar(200)
  fraisInsc               String         @db.VarChar(50)
  etablissement           Etablissement? @relation(fields: [idEtab], references: [id], onDelete: Cascade)
  idEtab                  Int?
  datePremiereInscription DateTime
  Inscription             Inscription[]
  emploie                 Emploie[]
}

model Enseignant {
  id            Int            @id @default(autoincrement())
  nomEnsg       String         @db.VarChar(50)
  prenomEnsg    String         @db.VarChar(50)
  telEnsg       String         @db.VarChar(20)
  adresseEnsg   String         @db.VarChar(200)
  modePaiement  String         @db.VarChar(50)
  taux          Float
  login         String         @db.VarChar(50)
  password      String         @db.VarChar(50)
  emailEnsg     String         @db.VarChar(50)
  etablissement Etablissement? @relation(fields: [idEtab], references: [id])
  idEtab        Int?
  matiereEnsg   MatiereEnsg[]
  dispoEnsg     DispoEnsg[]
  groupeHeure   GroupeHeure[]
  groupeEnsg    GroupeEnsg[]
  emploie       Emploie[]

}

model Etablissement {
  id                Int           @id @default(autoincrement())
  nomEtab           String        @db.VarChar(50)
  typeEtab          String        @db.VarChar(50)
  descEtab          String        @db.VarChar(200)
  nomResp           String        @db.VarChar(50)
  email             String        @db.VarChar(50)
  tel               String        @db.VarChar(20)
  logo              String?       @db.LongText
  salle             Salle[]
  user              User[]
  matiere           Matiere[]
  niveau            NiveauClass[]
  enseignant        Enseignant[]
  matiereEnseignant MatiereEnsg[]
  dispoEnsg         DispoEnsg[]
  eleve             Eleve[]
  inscription       Inscription[]
  PackSoutiens      Pack[]
  GroupeHeure       GroupeHeure[]
  // reglementsrecu    reglementsrecu[]
}

model Matiere {
  id            Int            @id @default(autoincrement())
  nomMatiere    String         @db.VarChar(50)
  etablissement Etablissement? @relation(fields: [idEtab], references: [id])
  idEtab        Int
  matiereEnsg   MatiereEnsg[]
  groupeHeure   GroupeHeure[]
  packmatieres  PackMatieres[]
  Pack          Pack[]
}

model MatiereEnsg {
  id            Int            @id @default(autoincrement())
  // refMatiere    String         @db.VarChar(20)
  etablissement Etablissement? @relation(fields: [idEtab], references: [id])
  idEtab        Int?
  enseignant    Enseignant?    @relation(fields: [idEnsg], references: [id], onDelete: Cascade)
  idEnsg        Int?
  matiere       Matiere?       @relation(fields: [idMatiere], references: [id])
  idMatiere     Int?
}

model NiveauClass {
  id            Int            @id @default(autoincrement())
  refNiveau     String         @db.VarChar(20)
  fraisInscri   String         @db.VarChar(50)
  etablissement Etablissement? @relation(fields: [idEtab], references: [id])
  idEtab        Int?
  groupeHeure   GroupeHeure[]
  PackSoutiens  Pack[]
  eleve         Eleve[]
}

model Salle {
  id            Int            @id @default(autoincrement())
  nomSalle      String         @db.VarChar(50)
  typeSalle     String         @db.VarChar(50)
  etage         String         @db.VarChar(50)
  capacite      Float          @db.Float
  etablissement Etablissement? @relation(fields: [idEtab], references: [id])
  idEtab        Int?
  emploie       Emploie[]
}

model User {
  id            Int            @id @default(autoincrement())
  nomUser       String         @db.VarChar(50)
  prenomUser    String         @db.VarChar(50)
  fctUser       String         @db.VarChar(50)
  roleUser      UserRole
  loginUser     String         @db.VarChar(100)
  passwordUser  String         @db.VarChar(50)
  statusCompte  StatusCompte
  etablissement Etablissement? @relation(fields: [idEtab], references: [id])
  idEtab        Int?
  Activitylogs  Activitylogs[]
}

enum UserRole {
  ADMIN
  USER
  MANAGER
}

enum StatusCompte {
  ACTIF
  SUSPENDU
  INACTIF
}

//Suivie Pedagogique
model Inscription {
  id              Int            @id @default(autoincrement())
  groupeHeure     GroupeHeure?   @relation(fields: [idGroupe], references: [id])
  idGroupe        Int?
  eleve           Eleve?         @relation(fields: [idEleve], references: [id])
  idEleve         Int?
  prixMensuel     Float
  dateInscription DateTime
  etatInscription String         @db.VarChar(50)
  dateSusp        DateTime
  dateReprise     DateTime
  packSoutien     Pack?          @relation(fields: [idPack], references: [id])
  idPack          Int?
  etablissement   Etablissement? @relation(fields: [idEtab], references: [id])
  idEtab          Int?
  // absence         Absence[]
  // paiement        PaiementInscription[]
}

model GroupeHeure {
  id              Int             @id @default(autoincrement())
  niveau          NiveauClass?    @relation(fields: [idNiveau], references: [id], onDelete: Cascade)
  idNiveau        Int?
  enseignant      Enseignant?     @relation(fields: [idEnsg], references: [id], onDelete: Cascade)
  idEnsg          Int?
  matiere         Matiere?        @relation(fields: [idMatiere], references: [id], onDelete: Cascade)
  idMatiere       Int?
  numGroupe       String
  type            TypeGroupe
  prix_mensuel    Float?
  modePaiementEns ModePaiementEns
  taux            Float?
  date_debut      DateTime
  date_fin        DateTime
  nbrHeureSemaine Float
  etatGroupe      EtatGroupe
  etablissement   Etablissement?  @relation(fields: [idEtab], references: [id])
  idEtab          Int?
  groupeEnsg      GroupeEnsg[]
  emploie         Emploie[]
  Inscription     Inscription[]
}

enum EtatGroupe {
  En_instance
  En_cours
  Suspendue
  Cloture
}

enum TypeGroupe {
  Soutiens
  Libre
}

enum ModePaiementEns {
  ParPourcentage
  ParEleve
  ParHeure
  ParSeance
  ForfaitMensuell
}

// model Absence {
//   id          Int          @id @default(autoincrement())
//   inscription Inscription? @relation(fields: [idInscri], references: [id])
//   idInscri    Int?
//   jour        Float
//   dateAbs     DateTime
//   heureD      String       @db.VarChar(50)
//   heureF      String       @db.VarChar(50)
// }

model GroupeEnsg {
  id         Int          @id @default(autoincrement())
  groupe     GroupeHeure? @relation(fields: [idGroupe], references: [id])
  idGroupe   Int?
  enseignant Enseignant?  @relation(fields: [idEnsg], references: [id], onDelete: Cascade)
  idEnsg     Int?
  date_debut DateTime
  date_fin   DateTime
}

// model PaiementInscription {
//   id          Int          @id @default(autoincrement())
//   moisPay     Float
//   montantPay  Float
//   datePay     DateTime
//   date_susp   DateTime
//   modePay     String       @db.VarChar(50)
//   inscription Inscription? @relation(fields: [idInscri], references: [id])
//   idInscri    Int?
//   groupeHeure GroupeHeure? @relation(fields: [idGroupe], references: [id])
//   idGroupe    Int?
// }

model Emploie {
  id          Int          @id @default(autoincrement())
  groupeHeure GroupeHeure? @relation(fields: [idGroupe], references: [id])
  idGroupe    Int?
  salle       Salle?       @relation(fields: [idSalle], references: [id])
  idSalle     Int?
  enseignant  Enseignant?  @relation(fields: [idEnsg], references: [id], onDelete: Cascade)
  idEnsg      Int?
  eleve       Eleve?       @relation(fields: [idEleve], references: [id])
  idEleve     Int?
  jour        NomJours
  heureDebut  String       @db.VarChar(50)
  heureFin    String       @db.VarChar(50)
}

model Pack {
  id            Int            @id @default(autoincrement())
  libelle       String
  niveauClass   NiveauClass?   @relation(fields: [idNiveau], references: [id])
  idNiveau      Int?
  prixPack      Float
  etablissement Etablissement? @relation(fields: [idEtab], references: [id])
  idEtab        Int?
  matiere       Matiere?       @relation(fields: [idMatiere], references: [id])
  idMatiere     Int
  Inscription   Inscription[]
  packmatieres  PackMatieres[]
}

// model reglementsrecu {
//   id            Int            @id @default(autoincrement())
//   date          DateTime
//   montant       Float
//   typeReglement Float
//   observation   String
//   eleve         Eleve?         @relation(fields: [idEleve], references: [id])
//   idEleve       Int
//   etablissement Etablissement? @relation(fields: [idEtab], references: [id])
//   idEtab        Int
// }

model PackMatieres {
  id          Int      @id @default(autoincrement())
  pack        Pack?    @relation(fields: [idPack], references: [id])
  idPack      Int
  matiere     Matiere? @relation(fields: [idMatiere], references: [id])
  idMatiere   Int
  prixMatiere Float
}

model Jours {
  id        Int @id @default(autoincrement())
  nom_jours NomJours
}

enum NomJours {
  Dimanche
  Lundi
  Mardi
  Mercredi
  Jeudi
  Vendredi
  Samedi
}


// model Historiqueensggroupe {
//   id          Int          @id @default(autoincrement())
//   groupeheure GroupeHeure? @relation(fields: [idGroupe], references: [id])
//   idGroupe    Int
//   enseignant  Enseignant?  @relation(fields: [idEnsg], references: [id], onDelete: Cascade)
//   idEnsg      Int
//   dateDebut   DateTime
//   dateFin     DateTime
// }

// model Heures {
//   id     Int @id @default(autoincrement())
//   heures Int
// }
